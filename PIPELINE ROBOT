#define motor1 10
#define motor2 11
#define motor3 12
#define motor4 13
int const trigPin1 = 3;
int const echoPin1 = 2;
int const buzzPin = 4;
int const trigPin2 = 5;
int const echoPin2 = 6;


void setup() {

  pinMode(motor1, OUTPUT);
  pinMode(motor2, OUTPUT);
  pinMode(motor3, OUTPUT);
  pinMode(motor4, OUTPUT);
  pinMode(trigPin1, OUTPUT); // trig pin will have pulses output
  pinMode(echoPin1, INPUT); // echo pin should be input to get pulse width
  pinMode(trigPin2, OUTPUT); // trig pin will have pulses output
  pinMode(echoPin2, INPUT); // echo pin should be input to get pulse width
  pinMode(buzzPin, OUTPUT); // buzz pin is output to control buzzering
  Serial.begin(9600);


}

void loop() {


  if (Serial.available())
  {
    char data = Serial.read();
    Serial.println(data);


    if ( data == 'S')
    {
      stopCar();
    }
    else if (data == 'F') {
      forward();
      dis();

    }
    else if (data == 'B')
    {
      backward();
      dis();
    }
    else if (data == 'L')
    {
      left();
    }
    else if (data == 'R')
    {
      right();
    }
  }


}

void forward()
{
  digitalWrite(motor1, HIGH);
  digitalWrite(motor2, LOW);

  digitalWrite(motor3, LOW);
  digitalWrite(motor4, HIGH);
}


void backward()
{
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, HIGH);

  digitalWrite(motor3, HIGH);
  digitalWrite(motor4, LOW);
}

void left()
{
  digitalWrite(motor1, HIGH);
  digitalWrite(motor2, LOW);





  digitalWrite(motor3, LOW);
  digitalWrite(motor4, HIGH);
}

void right()
{
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, HIGH);


  digitalWrite(motor3, HIGH);
  digitalWrite(motor4, LOW);
}

void dis()
{

  int duration1, distance1, duration2, distance2;
  // Output pulse with 1ms width on trigPin
  digitalWrite(trigPin1, HIGH);
  delay(1);
  digitalWrite(trigPin1, LOW);
  // Measure the pulse input in echo pin
  duration1 = pulseIn(echoPin1, HIGH);
  // Distance is half the duration devided by 29.1 (from datasheet)
  distance1 = (duration1 / 2) / 29.1;

  digitalWrite(trigPin2, HIGH);
  delay(1);
  digitalWrite(trigPin2, LOW);
  // Measure the pulse input in echo pin
  duration2 = pulseIn(echoPin2, HIGH);
  // Distance is half the duration devided by 29.1 (from datasheet)
  distance2 = (duration2 / 2) / 29.1;
  // if distance less than 0.5meter and more than 0 (0 or less means over range)
  if ( distance1 > 10 && distance1 >= 0 ) {
    // Buzz
    digitalWrite(buzzPin, HIGH);
  } else {
    // Don't buzz
    digitalWrite(buzzPin, LOW);
  }
  // Waiting 60 ms won't hurt any one
  delay(60);


  if ( distance2 > 10 && distance2 >= 0 ) {
    // Buzz
    digitalWrite(buzzPin, HIGH);
  } else {
    // Don't buzz
    digitalWrite(buzzPin, LOW);
  }
  // Waiting 60 ms won't hurt any one
  delay(60);
}
void stopCar()
{
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);


  digitalWrite(motor3, LOW);
  digitalWrite(motor4, LOW);

}
